import 'dotenv/config'; // Carga las variables de entorno desde .env
import admin from 'firebase-admin';

// 1. Configura el Firebase Admin SDK usando variables de entorno
// No necesitas un archivo serviceAccountKey.json si tienes las variables correctas en tu .env
// Aseg√∫rate de que tu .env tiene las variables VITE_FIREBASE_*
const firebaseConfig = {
  apiKey:            process.env.VITE_FIREBASE_API_KEY,
  authDomain:        process.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId:         process.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket:     process.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId:             process.env.VITE_FIREBASE_APP_ID
};

admin.initializeApp({
  ...firebaseConfig,
  // Para el SDK de Admin, es mejor usar una cuenta de servicio para autenticarse.
  // Si ejecutas esto localmente, la forma m√°s f√°cil es configurar la variable de entorno GOOGLE_APPLICATION_CREDENTIALS
  // que apunte a tu archivo de clave de servicio JSON. Si esa variable existe, no necesitas `credential` aqu√≠.
});

const db = admin.firestore();

async function migrateUserDocuments() {
  console.log("üöÄ Iniciando la migraci√≥n de documentos de usuarios...");

  const usuariosRef = db.collection('usuarios');
  const snapshot = await usuariosRef.get();

  if (snapshot.empty) {
    console.log("üëã No se encontraron documentos en la colecci√≥n 'usuarios' para migrar.");
    return;
  }

  const operations = [];
  const BATCH_SIZE = 400; // Un buen tama√±o para estar por debajo del l√≠mite de 500 operaciones por batch
  let currentBatch = db.batch();
  let processedCount = 0;
  const emailsProcessed = new Set(); // Para detectar emails duplicados

  for (const doc of snapshot.docs) {
    const userData = doc.data();
    const originalDocId = doc.id;
    const userEmail = userData.email;

    if (!userEmail) {
      console.warn(`‚ö†Ô∏è Advertencia: El documento con ID '${originalDocId}' no tiene un campo 'email'. ¬°Saltando este documento!`);
      continue;
    }

    // Opcional: Validaci√≥n b√°sica del formato del email
    if (typeof userEmail !== 'string' || !/\S+@\S+\.\S+/.test(userEmail)) {
        console.warn(`‚ö†Ô∏è Advertencia: El email '${userEmail}' del documento '${originalDocId}' no parece un formato v√°lido. ¬°Saltando este documento!`);
        continue;
    }

    if (emailsProcessed.has(userEmail)) {
      console.error(`üö® ¬°ERROR CR√çTICO! Se encontr√≥ un email duplicado: '${userEmail}' (documento original ID: '${originalDocId}'). Si contin√∫as, el documento anterior con este email SER√Å SOBRESCRITO. Se recomienda DETENER la ejecuci√≥n y resolver los emails duplicados ANTES de proceder.`);
      // En un entorno real, probablemente querr√≠as detener el script aqu√≠.
      // Por ahora, el script continuar√°, pero el √∫ltimo documento con el email prevalecer√°.
    }
    emailsProcessed.add(userEmail);

    const newDocRef = usuariosRef.doc(userEmail.toLowerCase()); // Guardamos el email en min√∫sculas como ID

    // 2. Crea el nuevo documento con el email como ID
    currentBatch.set(newDocRef, userData);

    // 3. Marca el documento original para su eliminaci√≥n
    currentBatch.delete(doc.ref);

    processedCount++;
    console.log(`‚ú® Preparando para migrar documento ID: ${originalDocId} a nuevo ID: ${userEmail.toLowerCase()}`);

    // Ejecuta el batch peri√≥dicamente para evitar exceder el l√≠mite de 500 operaciones
    if (processedCount % BATCH_SIZE === 0) {
      console.log(`üì¶ Commitando batch de ${processedCount} documentos...`);
      operations.push(currentBatch.commit());
      currentBatch = db.batch(); // Inicia un nuevo batch
    }
  }

  // Commit de las operaciones restantes en el √∫ltimo batch
  if (processedCount % BATCH_SIZE !== 0) {
    console.log(`üì¶ Commitando el batch final. Documentos en este lote: ${processedCount % BATCH_SIZE === 0 ? BATCH_SIZE : processedCount % BATCH_SIZE}`);
    operations.push(currentBatch.commit());
  } else if (processedCount === 0) {
    console.log("ü§∑ No se encontraron documentos v√°lidos para migrar.");
    return;
  }

  await Promise.all(operations); // Espera a que todos los batches se completen
  console.log(`‚úÖ ¬°Migraci√≥n completada! Se procesaron ${processedCount} documentos.`);
  console.log("üëâ ¬°Recordatorio muy importante! Si tu aplicaci√≥n usa los IDs de documento originales, necesitar√°s actualizar esas referencias tambi√©n.");
}

// Ejecuta la funci√≥n de migraci√≥n y maneja errores
migrateUserDocuments().catch(error => {
  console.error("‚ùå Ocurri√≥ un error grave durante la migraci√≥n:", error);
  process.exit(1); // Sale con c√≥digo de error
});
